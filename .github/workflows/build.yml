name: Electron CI Build (unsigned)

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
  release:
    types: [created, published]

permissions:
  contents: write

jobs:
  build:
    # ← buildジョブだけ src を作業ディレクトリに
    defaults:
      run:
        working-directory: src

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            target: mac
            args: --mac
          - os: windows-2022
            target: win
            args: --win
          - os: ubuntu-latest
            target: linux
            args: --linux AppImage

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            src/package-lock.json
            src/npm-shrinkwrap.json
            src/yarn.lock

      - name: Cache Electron caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('src/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Print versions
        run: |
          node -v
          npm -v
          npx electron -v || true
          npx electron-builder --version || true

      - name: Install deps (ci if lockfile, otherwise install)
        shell: bash
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ] || [ -f yarn.lock ]; then
            echo "Lockfile found → npm ci"
            npm ci
          else
            echo "No lockfile → npm install"
            npm install
          fi

      - name: Build (unsigned) with log
        shell: bash
        run: |
          mkdir -p ../logs
          npx electron-builder ${{ matrix.args }} -p never 2>&1 | tee ../logs/builder-${{ matrix.target }}.log
        env:
          ELECTRON_CACHE: ~/.cache/electron
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
          CSC_IDENTITY_AUTO_DISCOVERY: "false"

      - name: List outputs (debug)
        shell: bash
        run: |
          echo "== src directory =="
          ls -la
          echo "== dist directory =="
          ls -la dist || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-dist
          # upload-artifact は リポジトリルート基準
          path: src/dist/**/*
          if-no-files-found: error

      - name: Upload builder logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-logs
          path: logs/**
          if-no-files-found: warn

    release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
    runs-on: ubuntu-latest

    steps:
      # ← gh が git 情報を参照しても安全に
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Show assets (debug)
        run: |
          find ./artifacts -type f -ls || true

      - name: Determine tag name
        id: tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create/Update GitHub Release (gh)
        env:
          # gh は GH_TOKEN も GITHUB_TOKEN も読める。両方エクスポートしておくと安心
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ steps.tag.outputs.tag }}"

          # 空ファイルを除外して配列に
          mapfile -t FILES < <(find ./artifacts -type f -size +0c)

          # 既存があればアップロードを試み、失敗（immutable等）なら作り直し
          if gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            echo "Release $TAG exists. Uploading assets..."
            if ! gh release upload "$TAG" "${FILES[@]}" --clobber --repo "$REPO"; then
              echo "Upload failed. Recreating release..."
              gh release delete "$TAG" -y --repo "$REPO" || true
              gh release create "$TAG" "${FILES[@]}" \
                --title "$TAG" \
                --notes "Automated release for $TAG" \
                --latest \
                --repo "$REPO"
            fi
          else
            echo "Creating new release $TAG"
            gh release create "$TAG" "${FILES[@]}" \
              --title "$TAG" \
              --notes "Automated release for $TAG" \
              --latest \
              --repo "$REPO"
          fi

